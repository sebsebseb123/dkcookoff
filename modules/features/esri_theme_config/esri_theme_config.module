<?php
/**
 * @file
 * Code for the Theme Configuration feature.
 */

include_once 'esri_theme_config.features.inc';

/**
 * Impliments hook_block_info
 */
function esri_theme_config_block_info(){
  $blocks = array();

  $blocks['copyright'] = array(
    'info' => t('Copyright Notice'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'visibility' => 0,
  );

  $blocks['header_nav_rsp'] = array(
    'info' => t('Header Navigation (Responsive)'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'visibility' => 0,
  );

  $blocks['newsletter'] = array(
    'info' => t('eNewsletters'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'visibility' => 0,
  );

  return $blocks;
}

/**
 * Impliments hook_block_view
 */
function esri_theme_config_block_view($delta){

  $block = array();

  switch ($delta) {
    case 'copyright':
      $block['subject'] = t('Copyright Notice');
      $block['content'] = '&copy ' . date('Y') . t(' Esri Canada. All Rights Reserved.');
      break;
    case 'header_nav_rsp':
      $block['subject'] = t('Header Navigation (Responsive)');
      $block['content'] = esri_theme_config_header_nav_block_contents();
      break;
    case 'newsletter':
      $block['subject'] = t('eNewsletters:');
      $block['content'] = esri_theme_config_newsletter_block_contents();
      break;
  }
  return $block;
}

/**
 * Return Header Nav String
 * @return string
 */
function esri_theme_config_header_nav_block_contents() {
  $output = array(
    '#type' => 'markup',
    '#markup' => '<a href="#footer-nav" class="jump-to-nav"><span class="element-invisible">Jump to Navigation</span></a>
      <a href="#footer-search" class="jump-to-search"><span class="element-invisible">Jump to Search</span></a>',
  );

  return $output;
}

/**
 *  Implements hook_menu().
 */
function esri_theme_config_menu() {
  $items = array();

  $items['education_resource'] = array(
    'title' => 'You must first agree to the terms and conditions.',
    'page callback' => 'esri_theme_config_agree_before_download',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Find out whether or not we've agreed.
 *
 * @param $hash
 *   The hash to check for.
 *
 * @return Bool - TRUE if they've agreed, FALSE if they haven't.
 */
function esri_theme_config_agreed($hash) {
  // Check for session var.
  if (!empty($_SESSION['esri_agree-'.$hash]) && $_SESSION['esri_agree-'.$hash] == TRUE) {
    return TRUE;
  }

  // Check for cookie var.
  if (!empty($_COOKIE['esri_agree-'.$hash]) && $_COOKIE['esri_agree-'.$hash] == TRUE) {
    return TRUE;
  }

  // Still nothing? Return FALSE.
  return FALSE;
}
/**
 * Callback for "Agree before download" page.
 *
 * @param $fid
 *   The file ID of the file we're trying to serve.
 *
 * @param $hash
 *   The caching hash ID, so we can get the agreement data.
 *
 * @return Either MENU_NOT_FOUND status (aka 404), if we don't have enough info.
 *   Or, serve the file, if they've agreed.
 *   Or, serve the agreement form if they haven't yet agreed.
 */
function esri_theme_config_agree_before_download($fid = NULL, $hash = NULL) {

  // If no fid or hash... what now?
  if (!$fid || !$hash) {
    return MENU_NOT_FOUND;
  }

  // Let's check for the agreement, based on the hash.
  if (esri_theme_config_agreed($hash)) {
    $file = file_load($fid);
    $headers = file_get_content_headers($file);

    // If all went well... the file has been transferred, and php exits...
    // Nothing beyond this next line should execute.
    file_transfer($file->uri, $headers);
  }

  // If we're here, we need to present the agreement form. Let's start by
  // finding the agreement text.
  $cache = cache_get('esri_agreement-'.$hash);

  // If the hash didn't return back a proper cache var:
  // - Then log event.
  // - Return 404.
  if (empty($cache->data)) {
    watchdog('ESRI', "Agreement text not found. We checked cid = @cid", array('cid' => 'esri_agreement-'.$hash));
    return MENU_NOT_FOUND;
  }

  // Set the vars for form_state
  $form_state['esri_agree'] = array(
    'agreement' => $cache->data,
    'fid' => $fid,
    'hash' => $hash,
  );

  return drupal_build_form('esri_theme_config_agree_before_download_form', $form_state);
}

/**
 * Form builder for the educational resource download agreement.
 */
function esri_theme_config_agree_before_download_form($form, &$form_state) {
  $agreement = $form_state['esri_agree']['agreement'];
  $form = array();

  // Our agreement is only markup.
  $form['agreement'] = array(
    '#markup' => check_markup(t($agreement['value']), $agreement['format']),
  );

  // Set the action buttons.
  $form['action']['#type'] = 'action';
  $form['action']['#prefix'] = '<div class="action-wrapper">';
  $form['action']['#suffix'] = '</div>';
  $form['action']['accept'] = array(
    '#type' => 'submit',
    '#name' => 'accept',
    '#value' => t('I Accept'),
  );
  $form['action']['cancel'] = array(
    '#type' => 'submit',
    '#name' => 'cancel',
    '#value' => t('Cancel'),
  );

  return $form;
}

/**
 * Form validate handler for the educational resource download agreement.
 */
function esri_theme_config_agree_before_download_form_validate($form, &$form_state) {
  // If we didn't accept, then... return form error.
  if ($form_state['clicked_button']['#name'] != 'accept') {
    form_set_error('accept', t('You must agree to the terms before you can download this file.'));
  }
}

/**
 * Form submit handler for the educational resource download agreement.
 */
function esri_theme_config_agree_before_download_form_submit($form, &$form_state) {
  $fid = $form_state['esri_agree']['fid'];
  $hash = $form_state['esri_agree']['hash'];
  global $base_root;

  // Set the session var, and a cookie to expire in 10 years.
  setcookie('esri_agree-' . $hash, TRUE, time()+60*60*24*256*10);
  $_SESSION['esri_agree-' . $hash] = TRUE;

  // Set up our message to the user.
  drupal_set_message(t('Thank you for agreeing to the terms. You only have to do this once if you have cookies enabled in your browser. Please feel free now to <a href="@base_root/education_resource/@fid/@hash">download the file</a>.', array('@base_root' => $base_root, '@fid' => $fid, '@hash' => $hash)));
}

/**
 * Implements hook_field_formatter_info().
 */
function esri_theme_config_field_formatter_info() {
  return array(
    'link_title_link' => array(
      'label' => t('Title, as link if URL is set'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'link_download_button' => array(
      'label' => t('Download button, if URL is set'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'file_download_button' => array(
      'label' => t('Download button for file'),
      'field types' => array('file'),
      'settings' => array('link_title' => 'Download'),
    ),
    'file_download_button_agree' => array(
      'label' => t('Download button for file, must agree first.'),
      'field types' => array('file'),
      'settings' => array('link_title' => 'Download', 'agreement' => array('value' => 'Change me!', 'format' => 'full_html')),
    ),
    'training_register_button' => array(
      'label' => t('Registration button for Training'),
      'field types' => array('field_collection'),
    ),
    'gp_button' => array(
      'label' => t('Generic Page - Buttons'),
      'field types' => array('field_collection'),
    ),
    'gp_key_info' => array(
      'label' => t('Generic Page - Key Info'),
      'field types' => array('field_collection'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function esri_theme_config_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  switch ($field['type']) {
    case 'link_field' :
      $elements = array();
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => theme('link_formatter_'. $display['type'], array('element' => $item, 'field' => $instance)),
        );
      }
      break;
    case 'file' :
      $elements = array();
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => theme('file_formatter_'. $display['type'], array('file' => (object) $item, 'settings' => $display['settings'])),
        );
      }
      break;
    case 'field_collection' :
      $elements = array();
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => theme('field_collection_formatter_'. $display['type'], array('element' => $item, 'field' => $instance)),
        );
      }
      break;
  }

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function esri_theme_config_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  switch ($display['type']) {
    case 'file_download_button_agree' :
      $element['agreement'] = array(
        '#title' => t('Agreement'),
        '#type' => 'text_format',
        '#default_value' => $settings['agreement']['value'],
        '#format' => $settings['agreement']['format'],
        '#required' => TRUE,
      );
      // don't break here since we also want to add the "Download text" field.
    case 'file_download_button' :
      $element['link_title'] = array(
        '#title' => t('Button title'),
        '#type' => 'textfield',
        '#size' => 20,
        '#default_value' => $settings['link_title'],
        '#required' => TRUE,
      );
      break;
  }

  return $element;

}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function esri_theme_config_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Init a blank summary var.
  $summary = '';

  // Depending on which field type... let's summarize some settings!
  switch ($display['type']) {
    case 'file_download_button_agree' :
      $summary .= t('Agreement: !text', array('!text' => text_summary(check_plain($settings['agreement']['value']), $settings['agreement']['format'], 50)));

      $summary .= '<br />';
    // Don't break here, since we also want the button title text.
    case 'file_download_button' :
      $summary .= t('Button title: !title', array('!title' => $settings['link_title']));
      break;
  }

  return $summary;
}

/**
 * Implements hook_theme().
 */
function esri_theme_config_theme() {
  return array(
    'link_formatter_link_title_link' => array(
      'variables' => array('element' => NULL),
    ),
    'link_formatter_link_download_button' => array(
      'variables' => array('element' => NULL),
    ),
    'file_formatter_file_download_button' => array(
      'variables' => array('file' => NULL, 'settings' => array()),
    ),
    'file_formatter_file_download_button_agree' => array(
      'variables' => array('file' => NULL, 'settings' => array()),
    ),
    'field_collection_formatter_training_register_button' => array(
      'variables' => array('element' => NULL),
    ),
    'field_collection_formatter_gp_button' => array(
      'variables' => array('element' => NULL),
    ),
    'field_collection_formatter_gp_key_info' => array(
      'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Theme function for "Download button."
 */
function theme_file_formatter_file_download_button($vars) {
  $href = file_create_url($vars['file']->uri);
  $settings = $vars['settings'];

  return l(t($settings['link_title']), $href, array('html' =>TRUE, 'attributes' => array('class' => array('download-button'))));
}

/**
 * Theme function for "Download button, must agree first."
 */
function theme_file_formatter_file_download_button_agree($vars) {
  $fid = $vars['file']->fid;
  $settings = $vars['settings'];

  // Store the agreement text in the cache, keyed by hash.
  $hash = substr(md5(print_r($settings['agreement'], TRUE)), 0, 5);
  cache_set('esri_agreement-'.$hash, $settings['agreement']);

  //return l($settings['link_title'], 'education_resource/' . $fid . '/' . $hash);

  return l(t($settings['link_title']), 'education_resource/' . $fid . '/' . $hash, array('query' => array('destination' => drupal_get_path_alias($_GET['q'])), 'attributes' => array('class' => array('ctools-modal-ctools-sample-style', 'download-button'))));
}

/**
 * Theme function for 'link_title_link' text field formatter.
 *   This is copied from the link module... taken from the
 *   "default" formatter... we're displaying nothing if the
 *   URL is not set.
 */
function theme_link_formatter_link_title_link($vars) {
  $link_options = $vars['element'];
  unset($link_options['element']['title']);
  unset($link_options['element']['url']);

  // Issue #1199806 by ss81: Fixes fatal error when the link URl is equal to page URL
  if (isset($link_options['attributes']['class'])) {
    $link_options['attributes']['class'] = array($link_options['attributes']['class']);
  }

  // Display a normal link if both title and URL are available.
  if (!empty($vars['element']['title']) && !empty($vars['element']['url'])) {
    return l($vars['element']['title'], $vars['element']['url'], $link_options);
  }
}

/**
 * Implements theme function for 'gp_button' field_collection formatter.
 */
function theme_field_collection_formatter_gp_button($vars) {
  // sanity check
  if (empty($vars['element']['value']))
    return '';
  // load the entity
  $field_collection_entity = entity_load('field_collection_item', array($vars['element']['value']));
  $entity = $field_collection_entity[(int)$vars['element']['value']];

  // Get our file and link vars.
  $file = !empty($entity->field_gp_file[LANGUAGE_NONE][0]) ? $entity->field_gp_file[LANGUAGE_NONE][0] : NULL;
  $link = !empty($entity->field_gp_link[LANGUAGE_NONE][0]) ? $entity->field_gp_link[LANGUAGE_NONE][0] : NULL;

  // If we have a file... replace the URL.
  if ($file) {
    $link['url'] = file_create_url($file['uri']);
  }

  return theme('link_formatter_link_download_button', array('element' => $link));
}

/**
 * Implements theme function for 'gp_key_info' field_collection formatter.
 */
function theme_field_collection_formatter_gp_key_info($vars) {
  // sanity check
  if (empty($vars['element']['value']))
    return '';
  // load the entity
  $field_collection_entity = entity_load('field_collection_item', array($vars['element']['value']));
  $entity = $field_collection_entity[(int)$vars['element']['value']];

  // Get our title and body vars.
  $title = !empty($entity->field_gp_title[LANGUAGE_NONE][0]) ? $entity->field_gp_title[LANGUAGE_NONE][0] : NULL;
  $body = !empty($entity->field_gp_body[LANGUAGE_NONE][0]) ? $entity->field_gp_body[LANGUAGE_NONE][0] : NULL;


  return '<div class="key-information"><h2>' . $title['value'] . '</h2><div class="description">' . check_markup($body['value'], $body['format']) . '</div></div>';
}

/**
 * Implements theme function for 'training_register_button' field_collection formatter.
 * Out puts the register button with a link to the event ID if RegOnline event ID is available,
 * or the alternate link otherwise.
 */
function theme_field_collection_formatter_training_register_button($vars) {
  // sanity check
  if (empty($vars['element']['value']))
    return '';
  // load the entity
  $field_collection_entity = entity_load('field_collection_item', array($vars['element']['value']));
  $register_link_obj = $field_collection_entity[(int)$vars['element']['value']];

  // output the link depending on what's available (event ID or alternate link)
  if (!empty($register_link_obj->field_training_regonline_id[LANGUAGE_NONE])) {
    $current_nid = arg(1);
    $link = 'register/training/' . $current_nid . '/' . $register_link_obj->field_training_regonline_id[LANGUAGE_NONE][0]['safe_value'];
    $linktext = t('Register now');
  }
  else if (!empty($register_link_obj->field_event_regonline_id[LANGUAGE_NONE])) {
    $current_nid = arg(1);
    $link = 'register/event/' . $current_nid . '/' . $register_link_obj->field_event_regonline_id[LANGUAGE_NONE][0]['safe_value'];
    $linktext = t('Register now');
  }
  else if (!empty($register_link_obj->field_training_url[LANGUAGE_NONE])) {
    $link = $register_link_obj->field_training_url[LANGUAGE_NONE][0]['url'];
    $linktext = $register_link_obj->field_training_url[LANGUAGE_NONE][0]['title'];
  }
  else if (!empty($register_link_obj->field_event_url[LANGUAGE_NONE])) {
    $link = $register_link_obj->field_event_url[LANGUAGE_NONE][0]['url'];
    $linktext = $register_link_obj->field_event_url[LANGUAGE_NONE][0]['title'];
  }
  else {
    return '';
  }

  return l($linktext, $link, array('attributes' => array('class' => 'training-register-now download-button')));
}

/**
 * Theme function for 'link_download_button' text field formatter.
 */
function theme_link_formatter_link_download_button($vars) {
  $link_options = $vars['element'];
  unset($link_options['element']['title']);
  unset($link_options['element']['url']);

  // Issue #1199806 by ss81: Fixes fatal error when the link URl is equal to page URL
  if (isset($link_options['attributes']['class'])) {
    $link_options['attributes']['class'] = array($link_options['attributes']['class']);
  }

  // Add our 'download-button' class.
  $link_options['attributes']['class'][] = 'download-button';

  // Display a normal link if both title and URL are available.
  if (!empty($vars['element']['title']) && !empty($vars['element']['url'])) {
    return l($vars['element']['title'], $vars['element']['url'], $link_options);
  }
}

/**
 * Return Newsletters String
 * @return string
 */
function esri_theme_config_newsletter_block_contents() {
  $output = array(
    '#type' => 'markup',
    '#markup' => '<form style="MARGIN-BOTTOM: 2px" method="post" name="ccoptin" action="http://ui.constantcontact.com/d.jsp" target="_blank" _lpchecked="1">

      <input value="1101612772543" type="hidden" name="m">
      <input value="oi" type="hidden" name="p">

      <label for="ea" class="element-invisible">' . t('Enter your email address to subscribe:') . '</label>

      <input type="text" class="ea" name="ea" autocomplete="OFF" title="' . t('Enter your email address.') . '">

      <input class="submit" value="' . t('Subscribe') . '" type="submit" name="subscribe">

      </form>',
  );

  return $output;
}

function _esri_configure_formatters() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    // Media filter
    'media_filter' => array(
      'weight' => '2',
        'status' => '1',
        'settings' => array(),
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;

  filter_format_save($filtered_html_format);
  
}

function _esri_configure_wysiwyg(){
  //WYSIWYG Setup Filtered HTML
  $wysiwyg_setting = array(
    'default' => 1, 
    'user_choose' => 0, 
    'show_toggle' => 1, 
    'theme' => 'advanced', 
    'language' => 'en', 
    'buttons' => array(
      'default' => array(
        'bold' => 1, 
        'italic' => 1
    ), 
      'filemanager' => array (
        'insertfile' => 1
    )), 
      'toolbar_loc' => 'top', 
      'toolbar_align' => 'left', 
      'path_loc' => 'bottom', 
      'resizing' => 1, 
      'verify_html' => 1, 
      'preformatted' => 0, 
      'convert_fonts_to_spans' => 1, 
      'remove_linebreaks' => 1, 
      'apply_source_formatting' => 0, 
      'paste_auto_cleanup_on_paste' => 0, 
      'block_formats' => 'p,pre,h2,h3,h4,h5,h6,div', 
      'css_setting' => 'theme', 
      'css_path' => '', 
      'css_classes' => '', 
      );
    
    $wysiwyg = db_insert('wysiwyg')->fields(array(
      'format' => 'filtered_html',
      'editor' => 'tinymce',
      'settings' => serialize($wysiwyg_setting)    
      ))
      ->execute();
  /*
  db_merge('wysiwyg')
    ->key(array('format' => 'filtered_html'))
    ->fields(array(
      'editor' => 'tinymce',
      'settings' => serialize($wysiwyg_setting),
    ))
    ->execute();
  */
}
